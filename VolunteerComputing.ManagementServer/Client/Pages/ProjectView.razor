@page "/project/{Id:int}"
@using VolunteerComputing.Shared.Models
@using System.Threading
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient Http
@inject NavigationManager NavigationManager
<h3>Project @project.Name</h3>
Minimum number of agreeing volunteer clients to consider result true: @project.MinAgreeingClients
<select class="form-control" @bind="project.ChoosingStrategy">
    <option disabled selected> --- </option>
    @foreach (var choosingStrategy in Enum.GetValues(typeof(ChoosingStrategy)))
    {
        <option value="@choosingStrategy">@choosingStrategy.ToString()</option>
    }
</select>
<input class="form-control" type="number" @bind="project.ChanceToUseNewDevice" />
<button class="btn btn-primary" @onclick="UpdateStrategy">Update Strategy</button><br>
@updateStrategyStatus
<br>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Windows CPU program</th>
            <th>Windows GPU program</th>
            <th>Linux CPU program</th>
            <th>Linux GPU program</th>
            <th>Exe name in Zip</th>
            <th>Inputs</th>
            <th>Outputs</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var computeTask in project.ComputeTasks)
        {
            var inputs = computeTask.PacketTypes.Where(t => t.IsInput).Select(t => t.PacketType).Select(t => (t.Type, t.Aggregable));
            var outputs = computeTask.PacketTypes.Where(t => !t.IsInput).Select(t => t.PacketType).Select(t => (t.Type, t.Aggregable));
            <tr>
                <td>@(!string.IsNullOrEmpty(computeTask.WindowsCpuProgram))</td>

                <td>@(!string.IsNullOrEmpty(computeTask.WindowsGpuProgram))</td>

                <td>@(!string.IsNullOrEmpty(computeTask.LinuxCpuProgram))</td>

                <td>@(!string.IsNullOrEmpty(computeTask.LinuxGpuProgram))</td>

                <td>@(string.IsNullOrEmpty(computeTask.ExeFilename) ? "Not a zip" : computeTask.ExeFilename)</td>

                <td>@string.Join(", ", inputs.Select(x => x.Type + (x.Aggregable ? " (aggregable)" : "")))</td>

                <td>@string.Join(", ", outputs.Select(x => x.Type + (x.Aggregable ? " (aggregable)" : "")))</td>
            </tr>
        }
    </tbody>
</table>
@foreach (var (typeName, packetCount) in CountDictionary)
{
    var style = $"width: {packetCount * 100 / PacketsCount}%";
    @typeName
    <div class="progress">
        <div class="progress-bar" role="progressbar" style="@style">@packetCount</div>
    </div>
    <br>
}
<br>

Results:
<ul>

    @foreach (var result in results)
    {

        var href = $"api/Results?fileId={result.FileId}&projectName={project.Name}";
        <li>
            <a href="@href">@result.CreatedAt</a>
        </li>
    }
</ul>

<button class="btn btn-primary" @onclick="Delete">Delete Project</button>
<button class="btn btn-primary" @onclick="DeletePackets">Delete Packets</button>
@deletePacketsStatus

@code {
    [Parameter]
    public int Id { get; set; }

    Project project = new Project { ComputeTasks = new List<ComputeTask>() };
    Dictionary<string, int> CountDictionary = new();
    List<Result> results = new();
    int PacketsCount = 1;
    string deletePacketsStatus = "";
    string updateStrategyStatus = "";
    HubConnection HubConnection;
    Timer timer;

    protected override async Task OnInitializedAsync()
    {
        {
            var project = await Http.GetFromJsonAsync<Project>($"api/Projects/{Id}");

            if (project is null)
                return;

            project.ComputeTasks = await Http.GetFromJsonAsync<List<ComputeTask>>($"api/ComputeTasks/ByProject/{Id}");
            project.PacketTypes = project.ComputeTasks
                .SelectMany(c => c.PacketTypes.Select(t => t.PacketType))
                .ToHashSet();
            this.project = project;
        }

        results = await Http.GetFromJsonAsync<List<Result>>($"api/Results/ByProject/{Id}");

        CountDictionary = project.PacketTypes.ToDictionary(t => t.Type, _ => 0);
        HubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/tasks"))
            .WithAutomaticReconnect()
            .Build();

        HubConnection.On("NewResult", (Result result) =>
        {
            if (project.Name == result.Project.Name)
            {
                results.Add(result);
            }
            StateHasChanged();
        });

        await HubConnection.StartAsync();
        await HubConnection.InvokeAsync("JoinClients");

        timer = new Timer(async _ =>
        {
            var sum = 0;
            foreach (var packetType in this.project.PacketTypes)
            {
                var count = await HubConnection.InvokeAsync<int>("CountPacketsByType", packetType.Id);
                CountDictionary[packetType.Type] = count;
                sum += count;
            }
            if (sum == 0)
                sum = 1;
            PacketsCount = sum;
            StateHasChanged();
        }, null, 0, 1000);
    }

    async Task UpdateStrategy()
    {
        updateStrategyStatus = "Updating strategy...";
        var result = await Http.PutAsJsonAsync($"api/Projects/UpdateStrategy/{Id}", project.Strategy);
        if (result.IsSuccessStatusCode)
            updateStrategyStatus = "Updated strategy.";
    }

    async Task Delete()
    {
        var result = await Http.DeleteAsync($"api/Projects/{Id}");
        if (result.IsSuccessStatusCode)
            NavigationManager.NavigateTo("projects");
    }

    async Task DeletePackets()
    {
        deletePacketsStatus = "Deleting packets...";
        var result = await Http.DeleteAsync($"api/Packets/DeleteByProject/{Id}");
        if (result.IsSuccessStatusCode)
            deletePacketsStatus = "Deleted packets.";
    }
}
