@page "/project/{Id:int}"
@using VolunteerComputing.Shared.Models
@using System.Threading
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient Http
@inject NavigationManager NavigationManager
<h3>Project @project.Name</h3>
Minimum number of agreeing volunteer clients to consider result true: @project.MinAgreeingClients

<table class="table table-striped">
    <thead>
        <tr>
            <th>Windows CPU program</th>
            <th>Windows GPU program</th>
            <th>Linux CPU program</th>
            <th>Linux GPU program</th>
            <th>Exe name in Zip</th>
            <th>Inputs</th>
            <th>Outputs</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var computeTask in project.ComputeTasks)
        {
            var inputs = computeTask.PacketTypes.Where(t => t.IsInput).Select(t => t.PacketType).Select(t => (t.Type, t.Aggregable));
            var outputs = computeTask.PacketTypes.Where(t => !t.IsInput).Select(t => t.PacketType).Select(t => (t.Type, t.Aggregable));
            <tr>
                <td>@(!string.IsNullOrEmpty(computeTask.WindowsCpuProgram))</td>

                <td>@(!string.IsNullOrEmpty(computeTask.WindowsGpuProgram))</td>

                <td>@(!string.IsNullOrEmpty(computeTask.LinuxCpuProgram))</td>

                <td>@(!string.IsNullOrEmpty(computeTask.LinuxGpuProgram))</td>

                <td>@(string.IsNullOrEmpty(computeTask.ExeFilename) ? "No a zip" : computeTask.ExeFilename)</td>

                <td>@string.Join(", ", inputs.Select(x => x.Type + (x.Aggregable ? " (aggregable)" : "")))</td>

                <td>@string.Join(", ", outputs.Select(x => x.Type + (x.Aggregable ? " (aggregable)" : "")))</td>
            </tr>
        }
    </tbody>
</table>
@foreach (var (typeName, packetCount) in CountDictionary)
{
    var style = $"width: {packetCount * 100 / PacketsCount}%";
    @typeName
    <div class="progress">
        <div class="progress-bar" role="progressbar" style="@style">@packetCount</div>
    </div><br>
}
<br>
<button class="btn btn-primary" @onclick="Delete">Delete</button>

@code {
    [Parameter]
    public int Id { get; set; }

    Project project = new Project { ComputeTasks = new List<ComputeTask>() };
    Dictionary<string, int> CountDictionary = new Dictionary<string, int>();
    int PacketsCount = 1;
    HubConnection HubConnection;
    Timer timer;

    protected override async Task OnInitializedAsync()
    {
        {
            var project = await Http.GetFromJsonAsync<Project>($"api/Projects/{Id}");

            if (project is null)
                return;

            project.ComputeTasks = await Http.GetFromJsonAsync<List<ComputeTask>>($"api/ComputeTasks/ByProject/{Id}");
            project.PacketTypes = project.ComputeTasks
                .SelectMany(c => c.PacketTypes.Select(t => t.PacketType))
                .ToHashSet();
            this.project = project;
        }

        foreach (var packetType in project.PacketTypes)
        {
            Console.WriteLine($"type: {packetType.Type}, project: ({packetType.Project.Id}, {packetType.Project.Name}, {packetType.Project.GetHashCode()}), id: {packetType.Id}, hash: {packetType.GetHashCode()}");
            foreach (var packetType1 in project.PacketTypes)
            {
                if (packetType.Type == packetType1.Type && packetType != packetType1)
                    Console.WriteLine($"same: {packetType == packetType1}, same2: {packetType.Equals(packetType1)}, type: {packetType1.Type}, project: ({packetType1.Project.Id}, {packetType1.Project.Name}, {packetType1.Project.GetHashCode()}), id: {packetType1.Id}, hash: {packetType1.GetHashCode()}");
            }
        }
        CountDictionary = project.PacketTypes.ToDictionary(t => t.Type, _ => 0);
        HubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/tasks"))
            .WithAutomaticReconnect()
            .Build();
        await HubConnection.StartAsync();
        await HubConnection.InvokeAsync("JoinClients");

        timer = new Timer(async _ =>
        {
            var sum = 0;
            foreach (var packetType in this.project.PacketTypes)
            {
                var count = await HubConnection.InvokeAsync<int>("CountPacketsByType", packetType.Id);
                CountDictionary[packetType.Type] = count;
                sum += count;
            }
            if (sum == 0)
                sum = 1;
            PacketsCount = sum;
            StateHasChanged();
        }, null, 0, 1000);
    }

    async Task Delete()
    {
        var result = await Http.DeleteAsync($"api/Projects/{Id}");
        if (result.IsSuccessStatusCode)
            NavigationManager.NavigateTo("projects");
    }
}
